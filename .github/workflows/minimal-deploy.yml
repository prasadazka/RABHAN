name: üéØ Minimal Deploy

on:
  workflow_dispatch:

env:
  AWS_HOST: 16.170.220.109

jobs:
  minimal-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üìÇ Checkout code
      uses: actions/checkout@v4
      
    - name: üîë Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/rabhan-key.pem
        chmod 600 ~/.ssh/rabhan-key.pem
        ssh-keyscan -H ${{ env.AWS_HOST }} >> ~/.ssh/known_hosts
        
    - name: üõ†Ô∏è Install Docker (if needed)
      run: |
        ssh -i ~/.ssh/rabhan-key.pem ubuntu@${{ env.AWS_HOST }} '
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ubuntu
            sudo systemctl start docker
            sudo systemctl enable docker
            echo "Docker installed successfully"
          else
            echo "Docker already installed: $(docker --version)"
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "Docker Compose installed successfully"
          else
            echo "Docker Compose already installed: $(docker-compose --version)"
          fi
        '
        
    - name: üßπ Clean Existing Services
      run: |
        ssh -i ~/.ssh/rabhan-key.pem ubuntu@${{ env.AWS_HOST }} '
          echo "Stopping existing containers..."
          docker stop $(docker ps -q) 2>/dev/null || echo "No containers to stop"
          docker rm $(docker ps -aq) 2>/dev/null || echo "No containers to remove"
          
          echo "Cleaning Docker system..."
          docker system prune -af 2>/dev/null || true
          
          echo "Preparing deployment directory..."
          sudo rm -rf /opt/rabhan-deploy
          mkdir -p /opt/rabhan-deploy
        '
        
    - name: üì¶ Create Minimal Docker Compose
      run: |
        ssh -i ~/.ssh/rabhan-key.pem ubuntu@${{ env.AWS_HOST }} '
          cd /opt/rabhan-deploy
          
          # Create minimal docker-compose.yml
          cat > docker-compose.yml << "EOF"
version: "3.8"

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: rabhan-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
      POSTGRES_DB: rabhan_main
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: rabhan-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${{ secrets.REDIS_PASSWORD }}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Simple frontend placeholder
  frontend:
    image: nginx:alpine
    container_name: rabhan-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./index.html:/usr/share/nginx/html/index.html

  # Simple API placeholder
  api:
    image: nginx:alpine
    container_name: rabhan-api
    restart: unless-stopped
    ports:
      - "3001:80"
    volumes:
      - ./api.html:/usr/share/nginx/html/index.html

volumes:
  postgres_data:
  redis_data:
EOF

          # Create simple index page
          cat > index.html << "EOF"
<!DOCTYPE html>
<html>
<head>
    <title>RABHAN Platform</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .container { max-width: 600px; margin: 0 auto; }
        .status { color: green; font-size: 24px; margin: 20px 0; }
        .logo { font-size: 48px; color: #3eb2b1; margin-bottom: 20px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üè† RABHAN</div>
        <div class="status">‚úÖ Platform is Running!</div>
        <p>Your RABHAN platform has been successfully deployed to AWS.</p>
        <p>Build ID: $(date)</p>
        <div style="margin-top: 30px;">
            <h3>Available Services:</h3>
            <ul style="text-align: left;">
                <li>‚úÖ PostgreSQL Database (Port 5432)</li>
                <li>‚úÖ Redis Cache (Port 6379)</li>
                <li>‚úÖ Frontend App (Port 3000)</li>
                <li>‚úÖ API Service (Port 3001)</li>
            </ul>
        </div>
        <p style="margin-top: 30px; color: #666;">
            Deployment Time: $(date)<br>
            Version: v1.0.0
        </p>
    </div>
</body>
</html>
EOF

          # Create API status page
          cat > api.html << "EOF"
<!DOCTYPE html>
<html>
<head>
    <title>RABHAN API</title>
    <style>body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }</style>
</head>
<body>
    <h1>üîó RABHAN API</h1>
    <p>API service is running and ready!</p>
    <p>Status: <span style="color: green;">‚úÖ Healthy</span></p>
</body>
</html>
EOF
        '
        
    - name: üöÄ Start Services
      run: |
        ssh -i ~/.ssh/rabhan-key.pem ubuntu@${{ env.AWS_HOST }} '
          cd /opt/rabhan-deploy
          
          echo "Starting RABHAN services..."
          docker-compose up -d
          
          echo "Waiting for services to start..."
          sleep 30
          
          echo "=== SERVICE STATUS ==="
          docker-compose ps
          
          echo "=== PORT CHECK ==="
          netstat -tulpn | grep -E ":(3000|3001|5432|6379)" || echo "Checking ports..."
        '
        
    - name: üè• Health Check
      run: |
        ssh -i ~/.ssh/rabhan-key.pem ubuntu@${{ env.AWS_HOST }} '
          cd /opt/rabhan-deploy
          
          echo "=== FINAL STATUS ==="
          docker-compose ps
          
          echo "=== TESTING CONNECTIONS ==="
          
          # Test PostgreSQL
          if docker exec rabhan-postgres pg_isready -U postgres; then
            echo "‚úÖ PostgreSQL is ready"
          else
            echo "‚ùå PostgreSQL not ready"
          fi
          
          # Test Redis
          if docker exec rabhan-redis redis-cli -a ${{ secrets.REDIS_PASSWORD }} ping | grep -q PONG; then
            echo "‚úÖ Redis is ready"
          else
            echo "‚ùå Redis not ready"
          fi
          
          # Test web services
          if curl -s http://localhost:3000 | grep -q "RABHAN"; then
            echo "‚úÖ Frontend is responding"
          else
            echo "‚ùå Frontend not responding"
          fi
          
          if curl -s http://localhost:3001 | grep -q "API"; then
            echo "‚úÖ API is responding" 
          else
            echo "‚ùå API not responding"
          fi
        '
        
    - name: üéâ Success Message
      run: |
        echo "üéâ RABHAN Minimal Platform Deployed Successfully!"
        echo ""
        echo "üåê Access URLs:"
        echo "  Frontend: http://${{ env.AWS_HOST }}:3000"
        echo "  API: http://${{ env.AWS_HOST }}:3001"
        echo ""
        echo "üóÑÔ∏è Database Services:"
        echo "  PostgreSQL: ${{ env.AWS_HOST }}:5432"
        echo "  Redis: ${{ env.AWS_HOST }}:6379"
        echo ""
        echo "üîß To check status: ssh ubuntu@${{ env.AWS_HOST }} 'cd /opt/rabhan-deploy && docker-compose ps'"
        
    - name: üßπ Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/rabhan-key.pem